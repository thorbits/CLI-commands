     TEST-linux start
#========================#

--> Append/replace into [vmname].vmx to fix audio
sound.present = "TRUE"
sound.fileName = "-1"
sound.virtualDev = "hdaudio"
sound.autoDetect = "TRUE"


#========================#
#      Debian Linux      #
#========================#

--> a nice file listing: ls -phalANXgs --color=auto --time-style=iso --no-group --group-directories-first
--> if unable to update/lock database: rm /etc/apt/db.lck
--> printf 'y\n' | DEBIAN_FRONTEND=noninteractive apt-get remove --purge -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" linux-image-`uname -r`*
--> list all installed kernels: dpkg -l | grep linux-image | awk '{print$2}' then sudo apt remove --purge linux-image-NAME
--> Add SU user: vim /etc/sudoers , usermod -aG sudo user

      Debian regular update
#========================#
printf '\nUpdating repos and software...\n\n'; echo -e "deb http://ftp.ca.debian.org/debian sid main contrib\ndeb-src http://ftp.ca.debian.org/debian trixie main contrib\n\ndeb http://security.debian.org/debian-security trixie-security main contrib\ndeb-src http://security.debian.org/debian-security trixie-security main contrib" > /etc/apt/sources.list; apt update; apt -y install zstd nala && { echo '1,2,3' && printf y\n; } | nala fetch --debian sid && nala update; nala full-upgrade -y; nala install -y autojump bc curl eza htop figlet git lolcat man-db neofetch neovim pv rsync sudo tldr vim wget && update-grub2; sed -i 's/set timeout=5/set timeout=1/' /boot/grub/grub.cfg; echo -e '\nPress enter to reboot'; read; reboot

      eZkernel Debian pre-compile update
#========================#
printf '\nUpdating software...\n\n'; echo -e "deb http://ftp.ca.debian.org/debian sid main contrib\ndeb-src http://ftp.ca.debian.org/debian trixie main contrib\n\ndeb http://security.debian.org/debian-security trixie-security main contrib\ndeb-src http://security.debian.org/debian-security trixie-security main contrib" > /etc/apt/sources.list; apt update; apt-mark hold linux-image-amd64; apt -y upgrade; apt-get clean all; sed -i 's/set timeout=5/set timeout=1/' /boot/grub/grub.cfg

      eZkernel Debian vanilla (https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git)
#========================#
printf '\nWelcome '; whoami; printf 'to eZkernel Debian\n\n'; apt -y upgrade bc bison crossbuild-essential-amd64 colormake debhelper fakeroot flex git libelf-dev libncurses-dev libssl-dev make neofetch pahole python3 rsync wget zstd; apt-get clean all; printf '\nCompiler software updated.\n\nDownloading sources...\n\n'; mkdir -p kernel/linux-upstream-6.7-rc5; cd $_; wget https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/snapshot/linux-master.tar.gz; printf '\nExtracting sources...\n'; tar -zxf *.gz --strip-components=1; rm *.gz; yes '' | make localmodconfig; make menuconfig && printf 'Compiling kernel...\n\n'; time { make -j7 bindeb-pkg; dpkg -i ~/kernel/*e-6*.deb; update-grub2; sed -i 's/set timeout=5/set timeout=1/' /boot/grub/grub.cfg; printf '\nCompilation time:\n'; } && printf '\neZkernel compilation successful: '; dpkg -l | grep linux-image-6.7 | awk '{print$2}'; echo -e '\nPress enter to reboot'; read; cd; rm -Rf k*; apt-get -y autoremove; apt-get clean all; apt-mark unhold linux-image-amd64; reboot

      eZkernel Debian Xanmod (config: https://github.com/xanmod/linux/tree/6.5/CONFIGS/xanmod/gcc | https://sourceforge.net/projects/xanmod/files/releases/main/)
#========================#
printf '\nWelcome '; whoami; printf 'to eZkernel Debian Xanmod\n\n'; apt -y upgrade bc bison crossbuild-essential-amd64 colormake debhelper fakeroot flex git libelf-dev libncurses-dev libssl-dev make neofetch pahole python3 rsync wget zstd; apt autoclean; printf '\nCompiler software updated.\n\nDownloading sources...\n\n'; mkdir -p kernel/linux-upstream-6.7-rc5; cd $_; wget https://github.com/xanmod/linux/blob/6.5/CONFIGS/xanmod/gcc/config_x86-64-v3 https://sourceforge.net/projects/xanmod/files/releases/main/6.6.5-xanmod1/patch-6.6.5-xanmod1.xz/download https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/snapshot/linux-master.tar.gz; printf '\nExtracting sources...\n'; tar -zxf *.gz --strip-components=1; rm *.gz; printf '\nApplying patch...\n'; unxz -d *.xz; rm *.xz; patch -ruN -d/ -p0 < patch-6.6.5-xanmod1; mv -v *3 .config; make menuconfig && printf 'Compiling kernel...\n\n'; time { make -j7 bindeb-pkg; dpkg -i ~/kernel/*e-6*.deb; update-grub2; sed -i 's/set timeout=5/set timeout=1/' /boot/grub/grub.cfg; printf '\nCompilation time:\n'; } && printf '\neZkernel compilation successful: '; dpkg -l | grep linux-image-6.7 | awk '{print$2}'; echo -e '\nPress enter to reboot'; read; cd; rm -Rf k*; apt-get -y autoremove; apt-get clean all; apt-mark unhold linux-image-amd64; reboot

xzcat patch-6.6.5-xanmod1.xz | patch -p1

printf '\nWelcome '; whoami; printf 'to eZkernel Debian Xanmod\n\n'; apt -y upgrade bc bison crossbuild-essential-amd64 colormake debhelper fakeroot flex git libelf-dev libncurses-dev libssl-dev make neofetch pahole python3 rsync wget zstd; apt autoclean; printf '\nCompiler software updated.\n\nDownloading sources...\n\n'; mkdir -p kernel/linux-upstream-6.7-rc5; cd $_; wget https://github.com/xanmod/linux/blob/6.5/CONFIGS/xanmod/gcc/config_x86-64-v3 https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/snapshot/linux-master.tar.gz; printf '\nExtracting sources...\n'; tar -zxf *.gz --strip-components=1; rm *.gz; mv -v *3 .config; make menuconfig && printf 'Compiling kernel...\n\n'; time { make -j7 bindeb-pkg; dpkg -i ~/kernel/*e-6*.deb; update-grub2; sed -i 's/set timeout=5/set timeout=1/' /boot/grub/grub.cfg; printf '\nCompilation time:\n'; } && printf '\neZkernel compilation successful: '; dpkg -l | grep linux-image-6.7 | awk '{print$2}'; echo -e '\nPress enter to reboot'; read; cd; rm -Rf k*; apt-get -y autoremove; apt-get clean all; apt-mark unhold linux-image-amd64; reboot

      eZkernel Debian Liquorix (config: https://github.com/damentz/liquorix-package/tree/6.5/master/linux-liquorix/debian/config)
#========================#
printf '\nWelcome '; whoami; printf 'to eZkernel Debian Liquorix\n\n'; apt -y upgrade bc bison crossbuild-essential-amd64 colormake debhelper fakeroot flex git libelf-dev libncurses-dev libssl-dev make neofetch pahole python3 rsync wget zstd; apt autoclean; printf '\nCompiler software updated.\n\nDownloading sources...\n\n'; mkdir -p kernel/linux-upstream-6.7-rc5; cd $_; wget https://github.com/damentz/liquorix-package/blob/6.5/master/linux-liquorix/debian/config/kernelarch-x86/config-arch-64 https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/snapshot/linux-master.tar.gz; printf '\nExtracting sources...\n'; tar -zxf linux-master.tar.gz --strip-components=1; rm linux-master.tar.gz; mv -v *arch-64 .config; make menuconfig && printf 'Compiling kernel...\n\n'; time { make -j7 bindeb-pkg; dpkg -i ~/kernel/*e-6*.deb; update-grub2; sed -i 's/set timeout=5/set timeout=1/' /boot/grub/grub.cfg; printf '\nCompilation time:\n'; } && printf '\neZkernel compilation successful: '; dpkg -l | grep linux-image-6.7 | awk '{print$2}'; echo -e '\nPress enter to reboot'; read; cd; rm -Rf k*; apt-get -y autoremove; apt-get clean all; apt-mark unhold linux-image-amd64; reboot

      eZkernel Debian libre (http://linux-libre.fsfla.org/pub/linux-libre/releases/)
#========================#
printf '\nWelcome '; whoami; printf 'to eZkernel Debian Libre\n\n'; apt -y upgrade bc bison crossbuild-essential-amd64 colormake debhelper fakeroot flex git libelf-dev libncurses-dev libssl-dev make neofetch pahole python3 rsync wget zstd; apt autoclean; printf '\nCompiler software updated.\n\nDownloading sources...\n\n'; mkdir -p kernel/linux-libre-6.6.6-gnu; cd $_; wget http://linux-libre.fsfla.org/pub/linux-libre/releases/LATEST-6.6.N/linux-libre-6.6.6-gnu.tar.xz; printf '\nExtracting sources...\n'; tar -xf *.xz --strip-components=1; rm *.xz; yes '' | make localmodconfig; make menuconfig && printf 'Compiling kernel...\n\n'; time { make -j7 bindeb-pkg; cd; dpkg -i ~/kernel/*gnu_6*.deb; update-grub2; sed -i 's/set timeout=5/set timeout=1/' /boot/grub/grub.cfg; printf '\nCompilation time:\n'; }; printf '\neZkernel compilation successful: '; dpkg -l | grep linux-image-6.6 | awk '{print$2}'; echo -e '\nPress enter to reboot'; read; cd; rm -Rf k*; apt-get -y autoremove; apt-get clean all; apt-mark unhold linux-image-amd64; reboot

      eZkde Debian
#========================#
apt -y upgrade xserver-xorg sddm kwin-x11 plasma-desktop kde-config-sddm kinfocenter kscreen plasma-browser-integration plasma-nm plasma-pa plasma-systemmonitor systemsettings dolphin kfind konsole; apt-get -y autoremove; apt autoclean; sed -i 's/set timeout=5/set timeout=1/' /boot/grub/grub.cfg; echo -e '\neZkde Debian install complete.\n\nPress enter to reboot.'; read; reboot

      eZsway Debian
#========================#
apt -y upgrade alacritty sway swaybg swayidle swayimg swaylock waybar wofi fonts-font-awesome; mkdir -p ~/.config/sway ~/.config/waybar ~/.config/wofi; !copy content of config files! ; chmod +x ~/.config/sway/*.sh

Debian Vivaldi snapshot (https://vivaldi.com/blog/)
#========================#
sudo mkdir -p /tmp/vivaldi && cd $_ && sudo wget https://downloads.vivaldi.com/snapshot/vivaldi-snapshot_6.4.3152.3-1_amd64.deb && sudo dpkg -i vivaldi-*.deb | sudo apt -y --fix-broken install

      Debian tuning
#========================#
sudo apt -y upgrade tuned tuned-utils tuned-utils-systemtap preload
systemctl start tuned && systemctl status tuned
sudo tuned-adm profile virtual-guest
--> Install apt-fast wrapper
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 1EE2FF37CA8DA16B
add-apt-repository ppa:apt-fast/stable
sudo apt update && sudo apt -y upgrade apt-fast
sudo vim /etc/apt-fast.conf
Add: MIRRORS=(http://ftp.ca.debian.org/debian, http://ftp.us.debian.org/debianâ€™)



#========================#
#       Arch Linux       #
#========================#

--> a nice file listing: ls -phalANXgs --color=auto --time-style=iso --no-group --group-directories-first
--> if unable to update/lock database: rm /var/lib/pacman/db.lck
--> local cache: mount --mkdir /dev/sr0 /mnt/repo && echo -e '[custom]\nSigLevel = PackageRequired\nServer = file:///mnt/repo/Packages' >> /etc/pacman.conf && repo-add /mnt/repo/repo.db.tar.gz
--> sed -i '/^#Color/Color\nILoveCandy' /etc/pacman.conf; sed -i '/^#ParallelDownloads = 5/ParallelDownloads = 5' /etc/pacman.conf 
--> || ( printf '\neZkernel Arch compilation failed.\n\nPress enter to exit'; read ) 
--> cp -v System.map /boot/System.map-linux-6.x.0; ln -sf /boot/System.map-linux-6.x.0 /boot/System.map; 
--> visudo nobody ALL=(ALL) NOPASSWD:ALL (THEN) mkdir -p /home/build; chgrp nobody /home/build; chmod g+ws /home/build; setfacl -m u::rwx,g::rwx /home/build; setfacl -d --set u::rwx,g::rwx,o::- /home/build
--> add after 'Extracting sources...' if logged as user: 'USER' --> chown -R $USER:$USER SOURCESARCHIVENAME
--> wget https://aur.archlinux.org/cgit/aur.git/snapshot/modprobed-db.tar.gz; tar -zxf *.gz --strip-components=1; printf 'y\n' | makepkg -si; rm -Rf * .*; modprobed-db; modprobed-db store; 
--> pacman -Syy --needed --noconfirm git && git clone https://github.com/ChrisTitusTech/ArchTitus && cd ArchTitus && ./archtitus.sh

       eZarch install (also: https://github.com/altercation/archblocks)
#========================#
--> create 1 partition UEFI/GPT
printf '\nWelcome '; whoami; echo -e 'to eZarch install\n\nCreating partitions...\n' && sgdisk -n 0:2048:+350M -t 1:ef00 /dev/sda && sgdisk -n 0:0:0 -t 2:8e00 /dev/sda && printf '\n' && mkfs.fat /dev/sda1 && mkfs.ext4 /dev/sda2 && mount -v /dev/sda2 /mnt && mount --mkdir -v /dev/sda1 /mnt/boot/efi && printf '\n' && sgdisk -p /dev/sda && printf '\n' && pacstrap -K /mnt base base-devel linux linux-firmware amd-ucode efibootmgr grub networkmanager sudo vi zstd && genfstab -U /mnt >> /mnt/etc/fstab && arch-chroot /mnt
--> THEN
echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen; locale-gen; echo -e "LANG=en_US.UTF-8" >> /etc/locale.conf; echo -e "arch" >> /etc/hostname; echo -e "127.0.0.1 localhost\n::1 localhost\n127.0.1.1 arch.domain arch" >> /etc/hosts; printf '\nInstalling bootloader...\n'; grub-install --target=x86_64-efi --bootloader-id=GRUB; grub-mkconfig -o /boot/grub/grub.cfg; sed -i 's/set timeout=5/set timeout=1/' /boot/grub/grub.cfg; printf '\nEnabling services...\n'; systemctl enable NetworkManager; systemctl enable systemd-networkd; systemctl enable systemd-resolved; printf '\nChoose Root password.\n'; passwd && useradd --groups wheel --create-home user; usermod --append --groups wheel user && echo -e 'wheel ALL=(ALL) ALL\nuser ALL=(ALL:ALL) ALL' > /etc/sudoers.d/01 && echo -e '\nChoose User password:'; passwd user && printf '\neZarch install complete.\n'; exit

--> OR create 1 partition BIOS/MSDOS
printf '\nWelcome '; whoami; echo -e 'to eZarch install\n\nCreating partitions...\n' && parted -s /dev/sda mklabel msdos && parted -s /dev/sda mkpart primary ext4 1MiB 102000MiB && parted -s /dev/sda set 1 boot on && mkfs.ext4 /dev/sda1 && mount -vt ext4 /dev/sda1 /mnt && mkdir /mnt/boot && parted -ls && printf '\n' && pacstrap -K /mnt base-devel linux linux-firmware amd-ucode efibootmgr grub networkmanager sudo vi zstd && genfstab -U /mnt >> /mnt/etc/fstab && arch-chroot /mnt
--> THEN
echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen; locale-gen; echo -e "LANG=en_US.UTF-8" >> /etc/locale.conf; echo -e "arch" >> /etc/hostname; echo -e "127.0.0.1 localhost\n::1 localhost\n127.0.1.1 arch.domain arch" >> /etc/hosts; printf '\nInstalling bootloader...\n'; grub-install /dev/sda; grub-mkconfig -o /boot/grub/grub.cfg; sed -i 's/set timeout=5/set timeout=1/' /boot/grub/grub.cfg; printf '\nEnabling services...\n'; systemctl enable NetworkManager; systemctl enable systemd-networkd; systemctl enable systemd-resolved; printf '\nChoose Root password.\n'; passwd && useradd --groups wheel --create-home user; usermod --append --groups wheel user && echo -e 'wheel ALL=(ALL) ALL\nuser ALL=(ALL:ALL) ALL' > /etc/sudoers.d/01 && echo -e '\nChoose User password:'; passwd user && printf '\neZarch install complete.\n'; exit

REMINDER: To compile a kernel log in as user, as makepkg is not allowed when root.
#========================#

       eZkernel Arch (https://aur.archlinux.org/packages/linux-clear)
#========================#
printf '\nWelcome '; whoami; printf 'to eZkernel Arch\n\n'; sudo pacman -Syy --needed --noconfirm nano neofetch wget; mkdir src; cd $_; wget https://aur.archlinux.org/cgit/aur.git/snapshot/linux-clear.tar.gz; tar -zxf *.gz --strip-components=1; nano PKGBUILD && time { printf 'y\n'| makepkg -s --skipchecksums --skippgpcheck; printf '\nCompilation time:\n'; } && sudo pacman -U --noconfirm *.zst; sudo sed -i 's/set timeout=5/set timeout=1/' /boot/grub/grub.cfg; sudo grub-mkconfig -o /boot/grub/grub.cfg; printf '\neZkernel Arch compilation successful.\n\nPress enter to reboot'; read; cd; rm -Rf src; printf 'y\n' | sudo pacman -Qdtq | sudo pacman -Rs; sudo pacman --noconfirm -Sc; sudo reboot

       eZkernel Arch (https://aur.archlinux.org/packages/linux-amd-znver2)
#========================#
printf '\nWelcome '; whoami; printf 'to eZkernel Arch\n\n'; sudo pacman -Syy --needed --noconfirm nano neofetch wget; mkdir src; cd $_; wget https://aur.archlinux.org/cgit/aur.git/snapshot/linux-amd-znver2.tar.gz; tar -zxf *.gz --strip-components=1; nano PKGBUILD && time { printf 'y\n'| makepkg -s --skipchecksums --skippgpcheck; printf '\nCompilation time:\n'; } && sudo pacman -U --noconfirm *.zst; sudo sed -i 's/set timeout=5/set timeout=1/' /boot/grub/grub.cfg; sudo grub-mkconfig -o /boot/grub/grub.cfg; printf '\neZkernel Arch compilation successful.\n\nPress enter to reboot'; read; cd; rm -Rf src; printf 'y\n' | sudo pacman -Qdtq | sudo pacman -Rs -; sudo pacman --noconfirm -Sc; sudo reboot

       eZkernel Arch (https://aur.archlinux.org/packages/linux-cachyos-rc)
#========================#
printf '\nWelcome '; whoami; printf 'to eZkernel Arch\n\n'; sudo pacman -Syy --needed --noconfirm nano neofetch wget; mkdir src; cd $_; wget https://aur.archlinux.org/cgit/aur.git/snapshot/linux-cachyos-rc.tar.gz; tar -zxf *.gz --strip-components=1; nano PKGBUILD && time { printf 'y\n'| makepkg -s --skipchecksums --skippgpcheck; printf '\nCompilation time:\n'; } && sudo pacman -U --noconfirm *.zst; sudo sed -i 's/set timeout=5/set timeout=1/' /boot/grub/grub.cfg; sudo grub-mkconfig -o /boot/grub/grub.cfg; printf '\neZkernel Arch compilation successful.\n\nPress enter to reboot'; read; cd; rm -Rf src; printf 'y\n' | sudo pacman -Qdtq | sudo pacman -Rs -; sudo pacman --noconfirm -Sc; sudo reboot

       eZkernel Arch (https://aur.archlinux.org/packages/linux-xanmod-linux-bin-x64v3 | https://aur.archlinux.org/packages/linux-xanmod-edge-linux-bin-x64v3)
#========================#
printf '\nWelcome '; whoami; printf 'to eZkernel Arch\n\n'; sudo pacman -Syy --needed --noconfirm nano neofetch wget; mkdir src; cd $_; wget https://aur.archlinux.org/cgit/aur.git/snapshot/linux-xanmod-linux-bin-x64v3.tar.gz; tar -zxf *.gz --strip-components=1; nano PKGBUILD && time { printf 'y\n'| makepkg -s --skipchecksums --skippgpcheck; printf '\nCompilation time:\n'; } && sudo pacman -U --noconfirm *.zst; sudo sed -i 's/set timeout=5/set timeout=1/' /boot/grub/grub.cfg; sudo grub-mkconfig -o /boot/grub/grub.cfg; printf '\neZkernel Arch compilation successful.\n\nPress enter to reboot'; read; cd; rm -Rf src; printf 'y\n' | sudo pacman -Qdtq | sudo pacman -Rs -; sudo pacman --noconfirm -Sc; sudo reboot

printf '\nWelcome '; whoami; printf 'to eZkernel Arch\n\n'; sudo pacman -Syy --needed --noconfirm nano neofetch wget; mkdir src; cd $_; wget https://aur.archlinux.org/cgit/aur.git/snapshot/linux-xanmod-edge-linux-bin-x64v3.tar.gz; tar -zxf *.gz --strip-components=1; nano PKGBUILD && time { printf 'y\n'| makepkg -s --skipchecksums --skippgpcheck; printf '\nCompilation time:\n'; } && sudo pacman -U --noconfirm *.zst; sudo sed -i 's/set timeout=5/set timeout=1/' /boot/grub/grub.cfg; sudo grub-mkconfig -o /boot/grub/grub.cfg; printf '\neZkernel Arch compilation successful.\n\nPress enter to reboot'; read; cd; rm -Rf src; printf 'y\n' | sudo pacman -Qdtq | sudo pacman -Rs -; sudo pacman --noconfirm -Sc; sudo reboot

       eZkernel Arch (https://aur.archlinux.org/packages/linux-lqx)
#========================#
printf '\nWelcome '; whoami; printf 'to eZkernel Arch\n\n'; sudo pacman -Syy --needed --noconfirm nano neofetch wget; mkdir src; cd $_; wget https://aur.archlinux.org/cgit/aur.git/snapshot/linux-lqx.tar.gz; tar -zxf *.gz --strip-components=1; nano PKGBUILD && time { printf 'y\n'| makepkg -s --skipchecksums --skippgpcheck; printf '\nCompilation time:\n'; } && sudo pacman -U --noconfirm *.zst; sudo sed -i 's/set timeout=5/set timeout=1/' /boot/grub/grub.cfg; sudo grub-mkconfig -o /boot/grub/grub.cfg; printf '\neZkernel Arch compilation successful.\n\nPress enter to reboot'; read; cd; rm -Rf src; printf 'y\n' | sudo pacman -Qdtq | sudo pacman -Rs -; sudo pacman --noconfirm -Sc; sudo reboot

       eZkde Arch
#========================#
{ echo '10'; echo '2 8 10 16 17 22 30 31 34 35 36 38 45 46'; echo '5 14 15 23 38 68 111'; echo '2'; echo '1'; echo '1'; echo '1'; printf 'y'; } | pacman -Syy --needed xorg sddm plasma kde-applications network-manager-applet && systemctl enable sddm && echo -e '\neZkde Arch install complete.\n\nPress enter to exit.'; read

       Arch Vivaldi snapshot (https://vivaldi.com/blog/)
#========================#
sudo mkdir -p /tmp/vivaldi && cd $_ && sudo curl -L "https://downloads.vivaldi.com/snapshot/vivaldi-snapshot-6.4.3152.3-1.x86_64.rpm" -o vivaldi-*.rpm && sudo nano PKGBUILD
-->PKGBUILD start
pkgname=vivaldi-snapshot
pkgver=5.8.2950.3-1
pkgrel=1
pkgdesc="An advanced browser made with the power user in mind."
arch=('x86_64')

depends=('alsa-lib' 'desktop-file-utils' 'gtk3' 'hicolor-icon-theme' 'libcups' 'libxss' 'nss' 'shared-mime-info')
optdepends=('vivaldi-snapshot-ffmpeg-codecs: playback of proprietary video-audio')

source=('vivaldi-snapshot-5.8.2950.3-1.x86_64.rpm')

sha256sums=('SKIP')

package() {
 find $srcdir/ -mindepth 1 -maxdepth 1 -type d | xargs cp -r -t "$pkgdir"
}
-->PKGBUILD end
sudo chown -R $USER:$USER /tmp/vivaldi
makepkg -si



#========================#
#      Fedora Linux      #
#========================#

--> a nice file listing: ls -phalANXgs --color=auto --time-style=iso --no-group --group-directories-first
--> list current kernel: uname -mrs
--> list all installed kernels: rpm -qa kernel
--> omit kernel updates: dnf -x kernel* -y upgrade
--> uninstall kernel: dnf remove $(rpm -qa 'kernel*' | grep '.rcX.' )

       eZkernel Fedora Copr (https://download.copr.fedorainfracloud.org/results/%40kernel-vanilla/fedora/fedora-rawhide-x86_64/) **/***
#========================#
printf '\nWelcome '; whoami; echo -e 'to eZkernel Fedora\n\nInstalling compiler software...\n'; dnf -y install bc bison dwarves elfutils-libelf-devel fedpkg flex gcc make ncurses-devel neofetch openssl openssl-devel perl rsync wget; dnf clean all; printf '\nCompiler software updated.\n\nDownloading sources...\n\n'; wget https://download.copr.fedorainfracloud.org/results/%40kernel-vanilla/fedora/fedora-rawhide-x86_64/06507306-mainline-fedora-rawhide/kernel-6.6.0-0.rc5.439.vanilla.fc40.x86_64.rpm; rpm -ivh *.rpm; printf 'y\n'| rm *.rpm; printf '\n\nExtracting sources...\n'; cd rpmbuild; tar -xf SOURCES/*.xz -C ~/rpmbuild --strip-components=1; yes '' | make localmodconfig; make menuconfig && printf 'Compiling kernel...\n\n'; time { make -j7 rpm-pkg; rpm -ivh ~/rpmbuild/RPMS/x86_64/kernel-6*.rpm; grub2-mkconfig -o /boot/grub2/grub.cfg; sed -i 's/set timeout=5/set timeout=1/' /boot/grub2/grub.cfg; printf '\nCompilation time:\n'; }; printf '\neZkernel Fedora compilation successful.\n\nPress enter to reboot'; read; cd; rm -Rf rpmbuild; reboot

--> OR kernel.spec installs itself dependencies:
printf '\nWelcome '; whoami; echo -e 'to eZkernel Fedora\n'; dnf -y install wget; printf '\nDownloading sources...\n\n'; wget https://download.copr.fedorainfracloud.org/results/%40kernel-vanilla/fedora/fedora-rawhide-x86_64/06507306-mainline-fedora-rawhide/kernel-6.6.0-0.rc5.439.vanilla.fc40.src.rpm; rpm -ivh *.rpm; printf 'y\n'| rm *.rpm; printf '\n\nExtracting sources...\n'; cd rpmbuild; tar -xf SOURCES/*.xz -C ~/rpmbuild --strip-components=1; dnf -y install ncurses-devel neofetch perl rsync; dnf -y builddep SPECS/kernel.spec; dnf clean all; printf '\nCompiler software updated.\n\n'; yes '' | make localmodconfig; make menuconfig && printf 'Compiling kernel...\n\n'; time { make -j7 rpm-pkg; rpm -ivh ~/rpmbuild/RPMS/x86_64/kernel-6*.rpm; grub2-mkconfig -o /boot/grub2/grub.cfg; sed -i 's/set timeout=5/set timeout=1/' /boot/grub2/grub.cfg; printf '\nCompilation time:\n'; }; printf '\neZkernel Fedora compilation successful.\n\nPress enter to reboot'; read; cd; rm -Rf rpmbuild; reboot

       eZkernel Fedora Xanmod (config: https://github.com/xanmod/linux/tree/6.5/CONFIGS/xanmod/gcc)
#========================#
printf '\nWelcome '; whoami; echo -e 'to eZkernel Fedora\n\nInstalling compiler software...\n'; dnf -y install bc bison dwarves elfutils-libelf-devel fedpkg flex gcc make ncurses-devel neofetch openssl openssl-devel perl rsync wget; dnf clean all; printf '\nCompiler software updated.\n\nDownloading sources...\n\n'; wget https://raw.githubusercontent.com/xanmod/linux/6.5/CONFIGS/xanmod/gcc/config_x86-64-v3 https://download.copr.fedorainfracloud.org/results/%40kernel-vanilla/fedora/fedora-rawhide-x86_64/06507306-mainline-fedora-rawhide/kernel-6.6.0-0.rc5.439.vanilla.fc40.src.rpm; rpm -ivh *.rpm; printf 'y\n'| rm *.rpm; printf '\n\nExtracting sources...\n'; cd rpmbuild; tar -xf SOURCES/*.xz -C ~/rpmbuild --strip-components=1; mv ~/*3 .config; make menuconfig && printf 'Compiling kernel...\n\n'; time { make -j7 rpm-pkg; rpm -ivh ~/rpmbuild/RPMS/x86_64/kernel-6*.rpm; grub2-mkconfig -o /boot/grub2/grub.cfg; sed -i 's/set timeout=5/set timeout=1/' /boot/grub2/grub.cfg; printf '\nCompilation time:\n'; }; printf '\neZkernel Fedora compilation successful.\n\nPress enter to reboot'; read; cd; rm -Rf rpmbuild; reboot

** other compile method:
printf '\nCompiling kernel...\n\n'; cd ~/rpmbuild/SPECS; sed -i 's/# define buildid .local/define buildid .-amd64/' kernel.spec; time { rpmbuild -bb --with baseonly --without debug --without debuginfo --target=`uname -m` kernel.spec && { dnf -y install --nogpgcheck RPMS/X86_64/kernel-6*.rpm; grub2-mkconfig -o /boot/grub2/grub.cfg; sed -i 's/set timeout=5/set timeout=1/' /boot/grub2/grub.cfg; printf '\nCompilation time:\n' } }; printf '\neZkernel Fedora compilation successful.\n\nPress enter to reboot'; read; cd; rm -Rf rpmbuild; reboot

printf '\nCompiling kernel...\n\n'; cd ~/rpmbuild/SPECS; sed -i 's/# define buildid .local/define buildid .-amd64/' kernel.spec; time { rpmbuild -bb --with baseonly --without debug --without debuginfo --target=x86_64 kernel.spec 2>&1 | tee ~/rpmbuild/RPMS/x86_64 && { dnf -y install --nogpgcheck RPMS/X86_64/kernel-6*.rpm; grub2-mkconfig -o /boot/grub2/grub.cfg; sed -i 's/set timeout=5/set timeout=1/' /boot/grub2/grub.cfg; printf '\nCompilation time:\n' } }; printf '\neZkernel Fedora compilation successful.\n\nPress enter to reboot'; read; cd; rm -Rf rpmbuild; reboot

*** enable this repo: dnf -y copr enable @kernel-vanilla/mainline && dnf -y upgrade 'kernel*' && reboot	(uninstall: dnf copr remove REPONAME)
*** advice dnf to query frequently updated repo every hour and less often updated repo every 4 hours: sudo sed -i 's!baseurl=https://download.copr.fedorainfracloud.org/results/@kernel-vanilla/\(mainline\|stable-rc\|next\).*!&\nmetadata_expire=1h!g; s!baseurl=https://download.copr.fedorainfracloud.org/results/@kernel-vanilla/\(stable\|fedora\)/.*!&\nmetadata_expire=4h!g;' /etc/yum.repos.d/_copr:copr.fedorainfracloud.org:group_kernel-vanilla:*.repo

       eZkde Fedora
#========================#
dnf group info kde-desktop-environment	 (to see list of groups in this environment)
sudo dnf install @kde-desktop-environment; sudo systemctl set-default graphical.target; sudo systemctl enable sddm



#========================#
#      Devuan Linux      #
#========================#

--> a nice file listing: ls -phalANXgs --color=auto --time-style=iso --no-group --group-directories-first

       Devuan update
#========================#
printf '\nUpdating software...\n\n'; echo -e "deb http://deb.devuan.org/merged daedalus main\ndeb http://deb.devuan.org/merged daedalus-security main\ndeb-src http://deb.devuan.org/merged daedalus-security main" > /etc/apt/sources.list; apt update; apt -y install zstd nala; { echo '1,2,3'; printf y\n; } | nala fetch --devuan excalibur; nala update; { printf y\n; } | nala install bc curl htop git lm-sensors neofetch sudo tldr vim wget; { printf y\n; } | nala full-upgrade && update-grub2; sed -i 's/set timeout=5/set timeout=1/' /boot/grub/grub.cfg; echo -e '\nPress enter to reboot'; read; reboot


      TEST-linux end
#========================#
